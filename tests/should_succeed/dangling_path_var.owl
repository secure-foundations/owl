locality alice

module type S = { 
    name x : nonce @ alice
}

module Srefined = { 
    name x : nonce @ alice
}

module M = functor (X : S) => {
    module Z = X
    def alice_main() @ alice : Name(Z.x) = 
        get(Z.x)
}
    
module Main = M(Srefined)

/*
Expected output:


defs = [
    Top_Main_alice_main @ Top.alice : () -> Name(Top.Srefined.x) = 
        get(Top.Srefined.x)
]

nameEnv = [
    Top_Srefined_x : nonce @ Top.alice
]

*/