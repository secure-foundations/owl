include "defs.owl"

def init_recv<i@n,m>(tki : transp_keys_init<session i, pid n, pid m>) @
Initiator<n>
    : Option Data<adv /\ [channel_secret<@n,m>]> = 
    input i in 
    parse tki as transp_keys_init<session i, pid n, pid m>(eph, c7, init_send,
    resp_send) in 
    parse i as transp(tag, rcv, ctr, pkt) in {
        pcase tki_secure<i,n,m>[eph] in 
        st_aead_dec(resp_send, pkt, 0x, ctr)
    }
    otherwise None()

def init_send<i@n,m>(tki : transp_keys_init<session i, pid n, pid m>,
    msg : Data<adv /\ [channel_secret<@n,m>], |adv|>
) @
Initiator<n>
    : Unit
    =
    parse tki as transp_keys_init<session i, pid n, pid m>(eph, c7, init_send,
    resp_send) in 
    pcase tki_secure<i,n,m>[eph] in 
    assert (! tki_secure<i,n,m>[eph] ==> tki_corrupt<i,n,m>[eph]);
    let transp_counter = get_counter N_init_send<i@n> in
    let rcv = 0x00000000 in // TODO 
    let c = st_aead_enc<N_init_send<i@n>>(init_send, msg, 0x) in 
    let transp_tag = transp_tag_value() in 
    let o = transp(transp_tag, rcv, transp_counter, c) in 
    output o

