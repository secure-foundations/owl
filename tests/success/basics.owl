locality alice 
locality bob 
name x : nonce @ alice
name y : nonce @ alice
type t = Name(x)
name k : enckey t @ alice

name n : nonce @ bob
name skB : sigkey Name(n) @ bob

func parse 
    arity 1

def alice1 () @ alice : Data<adv> =
    input i, s1 in 
    let c1 = aenc(get(k), get(x)) in 
    let _ = output c1 in  
    corr_case k in
    let c : if sec(k) then Option t else Option Data<adv> = adec(get(k), parse(i)) in 
    case c {
     | Some x => 
       let res : Data<adv> = () in res
     | None => 
       let res : Data<adv> = () in res
    }

def tst_constants() @ alice : Unit = 
    let x = 0 in
    let y = 012 in 
    let z = 0xabcd in 
    let w = 0xdeadbeef in 
    let a = 0x in 
    ()

def alice2 (vk : vk(skB)) @ alice : Data<adv> =
    input t, _ in 
    input m, _ in 
    corr_case skB in
    case vrfy(vk, t, m) {
    | None => ()
    | Some m' => 
        let m'' : if sec(skB) then Name(n) else Data<adv> = m' in
        ()
    }


