locality alice

name x<i> : nonce @ alice
name y<i> : nonce @ alice

enum t<i, j> { 
    | A Name(x<i>)
    | B Name(y<j>)
    | C
}

def alice<i, j> (x : t<idx i, idx j>) @ alice : Unit = 
    assert ((A?(x) == true) \/ (B?(x) == true) \/ (C?(x) == true));
    assert (! (A?(x) == true /\ B?(x) == true));
    assert (! (B?(x) == true /\ C?(x) == true));
    assert (! (A?(x) == true /\ C?(x) == true));
    let z = C<idx i, idx j>() in
    assert (C?(z) == true);
    // TODO: make the below work
    assert (A?(z) == false);
    ()

def alice2 (x : Bool<adv>) @ alice : Unit = 
    assert (x == true \/ x == false);
    assert (! (x == true /\ x == false))

def alice3<i,j>(x : t<idx i, idx j>) @ alice : Unit = 
    case x {
        | A a => {
            assert (A?(x));
            assert (!B?(x));
            ()
        }
        | B b => ()
        | C => ()
    }
