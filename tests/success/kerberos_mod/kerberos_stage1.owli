module type Params = { 
    locality ticketserver // TGS
    locality service // S
    locality client // C
    locality authserver // KAS

    name uname : nonce @ ticketserver, service, client, authserver
    corr adv ==> [uname]

    // SK = service key
    name SK : enckey Data<adv> @ ticketserver

    // messages to/from the ticket server
    // encrypted using AK
    enum AKEnum {
        | ClientRequest
        | TicketResponse Name(SK)
    }

    // AK = authserver key
    name AK : enckey AKEnum @ authserver

    // pre-shared symmetric keys
    name kT : enckey Name(AK) @ authserver, ticketserver
    name kS : enckey Name(SK) @ ticketserver, service

    // *********************************
    // message formats
    // *********************************

    struct authserver_msg {
        _authserver_msg_1 : Data<adv> |cipherlen(|enckey|)|,
        _authserver_msg_2 : Data<adv> |cipherlen(|enckey|)|
    }

    struct client_to_ticketserver_msg {
        _client_to_ticketserver_msg_1 : Data<adv> |cipherlen(|enckey|)|,
        _client_to_ticketserver_msg_2 : Data<adv> |cipherlen(|tag|)|
    }

    struct ticketserver_msg {
        _ticketserver_msg_1 : Data<adv> |cipherlen(|enckey|)|,
        _ticketserver_msg_2 : Data<adv> |cipherlen(plus(|tag|, |enckey|))|
    }

    struct client_to_service_msg {
        _client_to_service_msg_1 : Data<adv> |cipherlen(|enckey|)|,
        _client_to_service_msg_2 : Data<adv> |cipherlen(|nonce|)|
    }
}

module type Kerberos_Stage1 (P : Params) = {
    name K
    struct client_stage1_t { 
        _ak : if sec(K) then Name(P.AK) else Data<adv> ||enckey||,
        _tgt : Data<adv> |cipherlen(|enckey|)|,
        _username : Data<adv> ||nonce||
    }
    def client_stage1() @ P.client : Option client_stage1_t

    def authserver_main() @ P.authserver : Unit
}

