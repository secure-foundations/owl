include "kerberos_stage1.owli"

module Kerberos_PKINIT(P : Params) : Kerberos_Stage1(P) = { 

    // PK_INIT-only localities
    locality certauth

    // shared key obtained by client through PKE
    name K : enckey Name(P.AK) @ P.authserver

    struct client_stage1_t { 
        _ak : if sec(K) then Name(P.AK) else Data<adv> ||enckey||,
        _tgt : Data<adv> |cipherlen(|enckey|)|,
        _username : Data<adv> ||nonce||
    }

    // client's signing key; client signs her username
    // (TODO: client signs a timestamp and nonce)
    name sigkeyC : sigkey Name(P.uname) @ P.client

    // authserver signing key; authserver signs K
    // (TODO: authserver signs K and a checksum of client's msg)
    name sigkeyA : sigkey Name(K) @ P.authserver

    corr [sigkeyC] ==> [K]

    // sigkeyCA is a certificate authority key that can sign
    // verification keys for the client and authserver
    enum CertAuthMsgs {
         | ClientCert vk(sigkeyC)
         | AuthCert vk(sigkeyA)
    }

    name sigkeyCA : sigkey CertAuthMsgs @ certauth

    corr [K] ==> [sigkeyCA]
    corr [sigkeyCA] ==> [K]
    corr [sigkeyA] ==> [sigkeyCA]

    // *********************************
    // message formats for PK_INIT
    // *********************************

    struct pkinit_client_to_authserver_msg {
        _pkinit_client_to_authserver_msg_1 : Data<adv> ||signature||,
        _pkinit_client_to_authserver_msg_2 : Data<adv> ||sigkey||,
        _pkinit_client_to_authserver_msg_3 : Data<adv> ||signature||,
        _pkinit_client_to_authserver_msg_4 : Data<adv> ||nonce||
    }

    struct ClientPKResponse { 
        _AuthCert : Data<adv> ||signature||,
        _vkA : vk(sigkeyA), 
        _k : Name(K),
        _sigofK : Data<[K]> ||signature||
    }

    name seckeyCnew : pkekey ClientPKResponse @ P.client

    def client_pkinit (certC : Data<adv> ||signature||) @ P.client
        : Option client_stage1_t =


        let vkCA = get_vk(sigkeyCA) in

        // make username
        let username = get(P.uname) in

        // sign username (TODO: sign a timestamp + nonce instead of username)
        let signed_name = sign(get(sigkeyC), username) in

        // output = {{verkeyC}}_CA, verkeyC, {{username}}_sigkeyC, username
        let p = pkinit_client_to_authserver_msg(certC, get_vk(sigkeyC), signed_name, username) in
        let _ = output p to endpoint(P.authserver) in

        // i = tgt, (AK)_K, msg = {{certA, verkeyA, k, [k]_sigkeyA}}_pubkeyC 
        input tgt in
        input enc_ak in
        input msg in

        // use pke key seckeyC to decrypt msg
        corr_case seckeyCnew in
        case pkdec(get(seckeyCnew), msg) {
            | None => None<ty:client_stage1_t>()
            | Some p => 
                parse p as ClientPKResponse(certA, vka, k, ksig) in  
                // certA = signature of verkeyA signed by sigkeyCA
                corr_case sigkeyCA in
                case vrfy(vkCA, certA, vka) { // get verkeyA = vk(sigkeyA)
                    | Some res =>
                        case res as CertAuthMsgs {
                        | ClientCert _ => None<ty:client_stage1_t>()
                        | AuthCert vkA => 
                            // now use verkeyA to verify signed_k
                            corr_case sigkeyA in
                            case vrfy(vkA, k, ksig) {// get K, sign(sigkeyA, k)
                                | Some k =>
                                    // finally, decrypt AK using k
                                    corr_case K in
                                    case adec(k, enc_ak) {
                                        | Some ak =>
                                            if eq(length(tgt), cipherlen(|enckey|)) then 
                                                let tgt' : Data<adv> |cipherlen(|enckey|)| = tgt in
                                                if eq(length(ak), |enckey|) then
                                                    Some(client_stage1_t(ak, tgt', username))
                                                else None<ty:client_stage1_t>()
                                            else  None<ty:client_stage1_t>()
                                        | None => None<ty:client_stage1_t>()
                                    }
                                | None => None<ty:client_stage1_t>()
                            }
                        otherwise => None<ty:client_stage1_t>()
                        }
                    | None => None<ty:client_stage1_t>()
                }
                otherwise None<ty:client_stage1_t>()
        }


    def client_stage1 () @ P.client 
        // requires ([sigkeyA] <= [sigkeyCA]) /\ ([K] <= [sigkeyCA]) /\ ([K] <= [sigkeyA]) /\ (! ([sigkeyA] <= [K]))
        : Option client_stage1_t =

        input certC' in
        if eq(length(certC'), |signature|) then
            let certC : Data<adv> ||signature|| = certC' in
            call client_pkinit(certC)
        else None<ty:client_stage1_t>()

    def authserver_pkinit (certA : Data<adv> ||signature||) @ P.authserver
        : Unit =

        let vkCA = get_vk(sigkeyCA) in
        let pkC = get_encpk(seckeyCnew) in

        // i = {{verkeyC}}_CA, verkeyC, {{username}}_sigkeyC, username
        input i in 
        parse i as pkinit_client_to_authserver_msg(certC, vkc, signed_un, un) in 
        corr_case sigkeyCA in
        corr_case sigkeyC in
        corr_case K in 

        // check that we got a good certificate
        case certC as CertAuthMsgs {// get client vertificate
                | ClientCert certC =>
                
                    // check that certC is valid for vkC
                    case vrfy(vkCA, certC, vkc) {
                        | None => ()
                        | Some vkC =>
                        
                            // use verkeyC to verify the username
                            case vrfy(vkC, signed_un, un) {
                                | None => ()
                                | Some username =>
                                
                                    // signed username is equal to the client we expected
                                    // TODO: check that a signed timestamp is still fresh
                                    if eq(username, get(P.uname)) then
                                        // sign/encrypt/send outputs to client
                                        let tgt =  aenc(get(P.kT), get(P.AK)) in
                                        output tgt to endpoint(P.client);
                                        
                                        let enc_ak =  aenc(get(K), get(P.AK)) in
                                        output enc_ak to endpoint(P.client);
                                        
                                        // bundle msg and encrypt with pubkeyC
                                        let sA = get(sigkeyA) in
                                        let k''= get(K) in
                                        // let signed_k : Data<adv> ||signature||= sign(sA, k'') in
                                        let signed_k = sign(sA, k'') in
                                        if eq(length(signed_k), |signature|) then
                                            let field1 : Data<adv>||signature|| = certA in 
                                            let field2 : vk(sigkeyA) = get_vk(sigkeyA) in 
                                            let field3 : Name(K) = get(K) in 
                                            // let field4 : Data<adv>||signature|| = signed_k in 
                                            let field4 = signed_k in 
                                            let str : ClientPKResponse = ClientPKResponse(field1, field2, field3, field4) in 
                                            let msg =  pkenc(pkC, str) in
                                            output msg to endpoint(P.client); ()
                                        else ()
                                    else ()
                            }
                    }
                | AuthCert x => ()
                otherwise => ()
        }
        otherwise ()


    def authserver_main () @ P.authserver
        : Unit =
        input certA' in
        if eq(length(certA'), |signature|) then
            let certA : Data<adv> ||signature|| = certA' in
            call authserver_pkinit(certA)
        else ()

    def certauth_main () @ certauth : Unit = 
        let skCA = get(sigkeyCA) in

        let vkC = get_vk(sigkeyC) in
        let certC = sign(skCA, ClientCert(vkC)) in
        let _ = output certC to endpoint(P.client) in

        let vkA = get_vk(sigkeyA) in
        let certA = sign(skCA, AuthCert(vkA)) in
        let _ = output certA to endpoint(P.authserver) in

        ()
}
