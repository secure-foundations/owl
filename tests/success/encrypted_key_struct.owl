/* 
    A, B already have key k

    A -> B : {k_data}_k

    B -> A : {t}_(k_data)

    A : retrieve t._y
*/


locality alice
locality bob
name x : nonce @ bob
name y : nonce @ bob
struct t {
    _x: Name(x),
    _y: Name(y)
}
name k_data : enckey t @ alice 
name shared_key : enckey Name(k_data) @ alice, bob

enum Result {
    | SomeResult Name(y)
    | NoResult
}

def alice_main () @ alice
     : if sec(k_data) then Result else Data<adv> = 
    let c = aenc(get(shared_key), get(k_data)) in
    let _ = output c to endpoint(bob) in 
    input i in 
    corr_case k_data in 
    let result = case adec(get(k_data), i) 
     | Some j => SomeResult(_y(j))
     | None => NoResult()
    in
    result
    
def bob_main () @ bob
    : Unit = 
    input i, ev in 
    // i : Data<adv>
    corr_case shared_key in
    case adec(get(shared_key), i) 
     | Some k => 
        let foo = t(get(x), get(y)) in
        let c = aenc(k, foo) in
        output c to ev
     | None => ()
        

