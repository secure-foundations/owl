/*
 * Protocol:
 * ---------
 * R --> T: nr
 * T --> R: nt, id + H(<c0, nr, nt>,k)
 * R --> T: id + H(<c1, nr, nt>,k)
 */
 

locality T
locality R

name NT<i> : nonce @ T
name NR<i> : nonce @ R
corr adv ==> /\_i [NR<i>]
corr adv ==> /\_i [NT<i>] // can remove this with xor property

name id<i> : nonce @ T
corr adv ==> /\_i [id<i>] // can remove this with xor property

func zz() = 0x00
func oo() = 0x01

struct h1_t<i> {
    h1_c  : Data<adv> |1|,
    h1_nr : Data<adv> ||nonce||,
    h1_nt : Name(NT<i>)
}


def T_main<i> @ T

name K<i> : mackey (t:h1_t<idx i>{happened(T_main<i>())}) @ T, R

struct m1_t {
    m1_nt     : Data<adv> ||nonce||,
    m1_xormac : Data<adv> ||nonce||
}

struct pair<i> {
    _id : Data<adv> ||nonce||,
    _k  : Name(K<i>)
}

// table keys : adv -> (exists i. Name(K<i>)) @ R
// table keys : (exists i. pair<idx i>) @ R
def lookupKeys(x: Data<adv>) @ R : Option(exists i. pair<idx i>) 

enum reader_response {
    | Yes (exists i. (x:Data<adv>{sec(K<i>) ==> ((x == get(NT<i>)) /\ happened(T_main<i>()))}))
    | No
}

def R_main<i>() @ R
: reader_response =
    let nR = get(NR<i>) in
    let _ = output(nR) to endpoint(T) in

    input inp in
    parse inp as m1_t(nT, mc) in 

    // let x: Option<adv>(exists j. Name(K<j>)) = lookup(keys, nT) in
    let x: Option (exists j. pair<idx j>) = call lookupKeys(nT) in

    case x {
        | None => No()
        | Some p_packed =>
            unpack j, p = p_packed in
            parse p as pair<idx j>(id, k) in
            corr_case K<j> in

            let mac_to_verify = h1_t<idx j>(zz(), nR, nT) in

            let mc'  = xor(id, mc) in
            case mac_vrfy(k, mac_to_verify, mc') {
                | None => No()
                | Some m =>
                    // let _ = check_equal(mc, xor(id, m)) in
                    assert(sec(K<j>) ==> happened(T_main<j>()));
                    parse m as h1_t<idx j>(c, nr, nT')  in     
                    let nT':if sec(K<j>) then (x:Name(NT<j>){happened(T_main<j>())}) else Data<adv> = nT' in
                    let nT'':if sec(K<j>) then
                    (x:Name(NT<j>){happened(T_main<j>())}) else
                    (p:(Data<adv>){sec(K<j>) ==> ((p == get(NT<j>)) /\ happened(T_main<j>()))}) = nT' in
                    // let nT'':if sec(K<j>) then Name(NT<j>) else Data<adv> = h1_nt<idx j>(m) in

                    let msg_to_mac = h1_t<idx j>(oo(), nR, nT') in
                    let _ = output xor(id, msg_to_mac) to endpoint(T) in

                    let _ = assert(sec(K<j>) ==> (nT'' == get(NT<j>))) in
                    //  let res: (exists i. (p:Data<adv>{sec(K<i>) ==> ((x = get(NT<i>)) /\ happened(T_main<i>()))})) = pack<j>(nT'') in

                    let res: (exists i. (p:Data<adv>{sec(K<i>) ==> ((p == get(NT<i>)) /\ happened(T_main<i>()))})) = pack<j>(nT'') in
                    Yes(res)
                    otherwise No()
                    // Ok(pack<j>(nT'))
            }
            otherwise No()
    }
    otherwise No()

def T_main<i> () @ T
: Unit =
    let id_i = get(id<i>) in
    // assert(happened(T_main<i>(id)));
    input inp in
    if eq(length(inp), |nonce|) then
        let inp:(Data<adv>||nonce||) = inp in
        let nT = get(NT<i>) in
        let msg_to_mac = h1_t<idx i>(zz(), inp, nT) in
        let m = mac(get(K<i>), msg_to_mac) in
        let x = xor(id_i, m) in
        output m1_t(nT, x) to endpoint(R)
    else
        output 0x to endpoint(R)
