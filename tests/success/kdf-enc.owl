locality alice
locality bob

/*
name alice<i> : nonce @ alice
*/

name alice1 : nonce @ alice
name alice2 : nonce @ alice
name alice3 : nonce @ alice

// hack so vest doesn't complain
struct s {
    _a : Data<adv> ||nonce||,
    _b : Data<adv> ||nonce||
}

name k : kdf {ikm info.
    (info == 0x01) -> enckey Name(alice1),
    (info == 0x02) -> strict kdf {ikm info.
        (info == 0x01) -> enckey Name(alice2),
        (info == 0x02) -> kdf {ikm info.
            (info == 0x01) -> enckey Name(alice3)
        }
    }
} @ alice, bob

corr [k] ==> [alice1]
corr [k] ==> [alice2]

// This is just a hack for extraction to test slicing the KDF output
// It's not supposed to mean anything cryptographically
name kk : kdf {ikm info.
    True -> strict (nonce) || nonce
} @ bob
corr adv ==> [kk]

def alice_main() @ alice : Unit = 
    corr_case k in
    let ek = kdf<0;;enckey;0>(get(k), 0x, 0x01) in 
    // assert (corr(k) ==> corr(KDF<k;0>(0x, 0x01)[0]));
    let c = aenc(ek, get(alice1)) in 
    output c to endpoint(bob);
    let k2 = kdf<1;;kdfkey;0>(get(k), 0x, 0x02) in
    let ek2 = kdf<0;;enckey;0>(k2, 0x, 0x01) in
    let c2 = aenc(ek2, get(alice2)) in 
    output c2 to endpoint(bob);
    ()

def bob_main() @ bob : Unit = 
    let k1 = kdf<0;; nonce || nonce; 0>(get(kk), 0x, 0x) in 
    let k2 = kdf<0;; nonce || nonce; 1>(get(kk), 0x, 0x) in 
    ()

/*
def bob_main() @ bob : Unit = 
    input c1 in
    corr_case k1 in 
    case adec(get(k1), c1) {
    | None => ()
    | Some m1 =>  
        input c2 in 
        let k2 = hash<k2>(get(k1)) in
        corr_case k2 in
        case adec(k2, c2) {
        | None => ()
        | Some m2 => 
            input c3 in 
            let k3 = hash<k3>(k2) in
            corr_case k3 in
            case adec(k3, c3) {
            | None => ()
            | Some m3 => 
                assert (sec(k3) ==> sec(k2));
                assert (sec(k2) ==> (m1 == get(alice1) /\ m2 == get(alice2)));
                assert (sec(k1) ==> (m1 == get(alice1)));
                ()
            }
        }
    }
*/

        
