locality client : 1
locality server 
name X<@g> : DH @ client<g>

name Y : DH @ server

name data<@h> : nonce @ client<h>
corr<i> [X<@i>] ==> [data<@i>]
corr<i> [Y] ==> [data<@i>]

odh L<@f> : 
    X<@f>, Y -> {salt info.
        True -> enckey Name(data<@f>)
    }

def client_main<@i>(pky : dhpk(Y)) @ client<i> : Unit = 
    let h = dhpk(get(X<@i>)) in
    output h;
    corr_case X<@i> in 
    corr_case Y in 
    let y = kdf<;odh L<@i>[0]; enckey; 0>(0x, dh_combine(pky, get(X<@i>)), 0x)
    in 
    let c = aenc(y, get(data<@i>)) in 
    output c

struct server_getkey_result<j> {
    sgr_h : (x:Data<adv>{is_group_elem(x)}),
    sgr_k : if 
            dh_combine(sgr_h, get(Y)) == dh_combine(dhpk(get(X<@j>)), get(Y))
            /\
            sec(X<@j>)
            /\ sec(Y)
        then
        Name(KDF<enckey;0;enckey Name(data<@j>)>(0x,
        dh_combine(dhpk(get(X<@j>)), get(Y)), 0x))
        else Data<adv>
}

def server_getkey() @ server : Option (exists j. server_getkey_result<session j>)
=
    input h in 
    if is_group_elem(h) then {
        pcase (exists j:idx. dh_combine(h, get(Y)) == dh_combine(dhpk(get(X<@j>)), get(Y))) in 
        choose_idx j | dh_combine(h, get(Y)) == dh_combine(dhpk(get(X<@j>)), get(Y)) in 
        let ss 
            = dh_combine(h, get(Y)) in 
        corr_case X<@j> in 
        corr_case Y in 
        let y = kdf<;odh L<@j>[0]; enckey; 0>(0x, ss, 0x) in 
        let res = pack<j>(server_getkey_result<session j>(h, y))
        in
        Some(res)
    }
    else None()


def server_main() @ server :
Unit = 
    let u = call server_getkey() in  
    case u {
    | None => ()
    | Some x_ => 
        unpack j, x = x_ in 
        parse x as server_getkey_result<session j>(h, k) in {
            input c in 
            pcase (dh_combine(h, get(Y)) == dh_combine(dhpk(get(X<@j>)), get(Y))) in 
            corr_case X<@j> in 
            corr_case Y in
            corr_case nameOf(k) in 
            case adec(k, c) as Option (Name(data<@j>)) {
            | Some m => 
                let c = aenc(k, m) in 
                output c
            | None => ()
            otherwise => ()
            }

        }
        // TODO parse x as server_getkey_result<session j>(h, )
    }
        




