// Just stealing from encrypted_key.owl

locality alice
locality bob


def alice_main @ alice
def bob_main @ bob

name x : nonce @ bob
name k_data : enckey (z:Name(x){happened(bob_main())}) @ alice
name shared_key : enckey (z:Name(k_data){happened(alice_main())}) @ alice, bob

enum Result {
    | SomeResult Name(x)
    | NoResult
}

def alice_main () @ alice
     : if sec(k_data) then x:Result{(SomeResult?(x) /\ sec(k_data)) ==> happened(bob_main())} else Data<adv>  

def bob_main () @ bob
    : x:Bool<adv>{(x /\ sec(shared_key)) ==> happened(alice_main()) }  

def alice_main () @ alice
     : if sec(k_data) then x:Result{(SomeResult?(x) /\ sec(k_data)) ==> happened(bob_main())} else Data<adv> = 
    let c = samp enc(get(shared_key), get(k_data)) in
    let _ = output c to endpoint(bob) in 
    input i, _ in 
    corr_case k_data in
    case dec(get(k_data), i) 
     | Some j => 
       assert(sec(k_data) ==> happened(bob_main()));
       SomeResult(j)
     | None => NoResult()
    
def bob_main () @ bob
    : x:Bool<adv>{(x /\ sec(shared_key)) ==> happened(alice_main()) } = 
    input i, _ in 
    // i : Data<adv>
    corr_case shared_key in
    case dec(get(shared_key), i) 
     | Some k => 
        assert (sec(shared_key) ==> happened(alice_main()));
        let c = samp enc(k, get(x)) in
        output c to endpoint(alice);
        true
     | None => false
        
