/*
* A -> B : aenc(<pkA,n0>,r0,pkB)
* B -> A : aenc(<n0,n>,r,pkA)
*/


locality A
locality B

name n0<i> : nonce @ A, B
name r0<i> : nonce @ A
name n<i> : nonce @ B
name r<i> : nonce @ B


struct m2<j> {
    m2_n0: Name(n0<j>),
    m2_n : Name(n<j>),
    m2_r: Name(r<j>)
}

name pkA : pkekey (exists j. m2<idx j>) @ A

enum m1_pkA_enum {
    | m1_pkA_tag Data<adv>
}

struct m1<i> {
    m1_n0 : Name(n0<i>),
    m1_r0: Name(r0<i>),
    m1_pkA: m1_pkA_enum
}

name pkB : pkekey (exists i. m1<idx i>) @ B

def A_main<i> () @ A
: Unit =
    let msg_to_enc        = m1<idx i>(get(n0<i>), get(r0<i>), m1_pkA_tag(get_encpk(pkA))) in
    let msg_to_enc_packed = pack<i>(msg_to_enc) in
    let pubKeyB           = get_encpk(pkB) in
    let encm              = pkenc(pubKeyB, msg_to_enc_packed) in
    let _ = output encm to endpoint(B) in

    input inp in
    corr_case pkA in
    let m' = pkdec(get(pkA), inp) in
    union_case m = m' in 
    ()


def B_main<j> () @ B
: Unit =
    let privKey = get(pkB) in
    corr_case pkB in

    input inp in
    let mm = pkdec(privKey, inp) in
    union_case m = mm in
    unpack i, m' = m in
    let n0' = m1_n0<idx i>(m') in
    let m1_pkA_e = m1_pkA<idx i>(m') in
    case m1_pkA_e
    | m1_pkA_tag m1_pkA =>
        let b1 = eq(m1_pkA, get_encpk(pkA)) in    // let b2 = eq(n0', |nonce|) in
        let b2 = checknonce(n0', get(n0<j>)) in // TODO: Check
        if b1 then
            if b2 then
                let msg_to_enc        = m2<idx j>(get(n0<j>), get(n<j>), get(r<j>)) in
                let msg_to_enc_packed = (pack<j>(msg_to_enc)) in
                let pubKeyA = get_encpk(pkA) in
                let encm = pkenc(pubKeyA, msg_to_enc_packed) in
                let _ = output encm to endpoint(A) in
                ()
            else
                ()
        else
            ()

