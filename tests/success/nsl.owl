locality alice
locality bob

name nA : nonce @ alice
name nB : nonce @ bob

struct nsl_alice_msg3 { 
    _na3A : Name(nA),
    _na3B : Name(nB) 
}

enum nsl_alice_message { 
    | Msg1 Name(nA)
    | Msg3 nsl_alice_msg3
}

struct nsl_bob_message { 
    _nbA : Union<Data<adv>, Name(nA)>,
    _nbB : Name(nB) 
}

struct nsl_result {
    _nrA : Name(nA), 
    _nrB : Name(nB) 
}

enum nsl_result_maybe { 
    | NRSome nsl_result
    | NRNone
}

name skA : pkekey nsl_bob_message @ alice
name skB : pkekey nsl_alice_message @ bob

def alice_main () @ alice : if sec(nA) /\ sec(nB) then
nsl_result_maybe else Data<adv /\ [nA] /\ [nB]>  = 
    let pkB = get_encpk(skB) in
    let c = samp pkenc(pkB, Msg1(get(nA))) in
    let _ = output c to endpoint(bob) in
    input i in
    corr_case skA in
    corr_case nA in
    corr_case nB in
    let c : if sec(skA) then Union<nsl_bob_message, Data<adv> > else Data<adv> = pkdec(get(skA), i) in 
    union_case x = c in         
    union_case nA' = _nbA(x) in 
    let nB' = _nbB(x) in 
    let b1 = checknonce(get(nA), nA') in 
    let b2 = eq(length(nB'), |nonce|) in 
    if b1 && b2 then 
        false_elim in 
        let c' = samp pkenc(pkB, Msg3(nsl_alice_msg3(get(nA), nB'))) in 
        let _ = output c' to endpoint(bob) in
        let res : if sec(nA) /\ sec(nB) then nsl_result_maybe else Data<adv /\ [nA] /\ [nB]> = NRSome(nsl_result(get(nA), nB')) in
        res
    else
        NRNone()

def bob_main () @ bob : (if sec(nA) /\ sec(nB) then nsl_result_maybe else Data<adv /\ [nA] /\ [nB]>) = 
    let pkA = get_encpk(skA) in
    input i in
    corr_case skB in
    corr_case nA in
    corr_case nB in
    let m = pkdec(get(skB), i) in
    union_case x = m in
    case x 
    | Msg1 nA' =>  
        if eq(length(nA'), |nonce|) then 
            let p = nsl_bob_message(nA', get(nB)) in 
            let c = samp pkenc(pkA, p) in
            output c to endpoint(alice);
            input i' in
            let m' = pkdec(get(skB), i) in
            union_case x' = m in
            begin case x' 
            | Msg1 _ => NRNone()
            | Msg3 p => 
                let b1 = checknonce(get(nB), _na3B(p)) in 
                let b2 = checknonce(nA', _na3A(p)) in 
                if b1 && b2 then 
                    false_elim in
                    let res: if sec(nA) /\ sec(nB) then nsl_result_maybe else Data<adv /\ [nA] /\ [nB]> = 
                        NRSome(nsl_result(nA', get(nB))) in
                    res
                else NRNone()
            end
        else NRNone()
    | Msg3 _ => NRNone()
