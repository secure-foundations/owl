/*
 * Reference: https://en.wikipedia.org/wiki/Otway%E2%80%93Rees_protocol
 *
 * Original Protocol:
 * A → B : M, A, B, {NA, M, A, B}KA
 * B → S : M, A, B, {NA, M, A, B}KA, {NB, M, A, B}KB
 * S → B : M, {NA, KAB}KA, {NB, KAB}KB
 * B → A : M, {NA, KAB}KA
 *
 */

locality Alice
locality Bob
locality AS

name NA<i> : nonce @ Alice
name NB<i> : nonce @ Bob
name m<i>  : nonce @ Alice, Bob

name KAB<i> : enckey Data<static> @ AS

// ************************************************************************
// Helper functions *******************************************************
// func check_session_identifier
//     arity 1

// func check_valid_username
//     arity 1

// func check_equal
//     arity 3
// ************************************************************************


// ************************************************************************
// Data encrypted using A's key KA ****************************************
struct kA_message_1<i> {
    _nA1 : Name(NA<i>),
    _mA  : Name(m<i>),
    _AA  : Data<adv> ||nonce||,
    _BA  : Data<adv> ||nonce||
}

struct kA_message_2<i, j> {
    _nA2  : Name(NA<i>),
    _kABA : Name(KAB<j>)
}

enum kA_messages<i, j> {
    | mA1 kA_message_1<idx i>        // messages 1 and 2
    | mA2 kA_message_2<idx i, idx j> // messages 3 and 4
}


enum encd_kA_message {
    | mA1_enc Data<adv> // |cipherlen(plus(plus(|nonce|, plus(|nonce|, plus(|nonce|, plus(|nonce|, zero())))), |tag|))|
    | mA2_enc Data<adv> // |cipherlen(plus(|nonce|, plus(|nonce|, plus(|tag|, zero()))))|
}

name KA : enckey (exists i. exists j. kA_messages<idx i, idx j>) @ Alice, AS
// ************************************************************************


// ************************************************************************
// Data encrypted using B's key KB ****************************************
struct kB_message_1<i> {
    _nB1 : Name(NB<i>),
    _mB  : Data<adv> ||nonce||,
    _AB  : Data<adv> ||nonce||,
    _BB  : Data<adv> ||nonce||
}

struct kB_message_2<i, j> {
    _nB2  : Name(NB<i>),
    _kABB : Name(KAB<j>)
}

enum kB_messages<i, j> {
    | mB1 kB_message_1<idx i>        // message 2
    | mB2 kB_message_2<idx i, idx j> // message 3
}

enum encd_kB_message {
    | mB1_enc Data<adv> // | cipherlen(plus(plus(|nonce|, plus(|nonce|, plus(|nonce|, plus(|nonce|, zero())))), |tag|)) |
    | mB2_enc Data<adv> // | cipherlen(plus(|nonce|, plus(|nonce|, plus(|tag|, zero()))))|
}

name KB : enckey (exists i. exists j. kB_messages<idx i, idx j>) @ Bob, AS
// ************************************************************************


// ************************************************************************
// The messages exchanged by the parties **********************************
struct msg1_AtoB {
    msg1_M : Data<adv> ||nonce||,
    msg1_A : Data<adv> ||nonce||,
    msg1_B : Data<adv> ||nonce||,
    // msg1_x : Data<adv> |cipherlen(plus(|nonce|, |nonce|))|  // missing two username lengths here
    msg1_x : encd_kA_message
}

struct msg2_BToS {
    msg2_M : Data<adv> ||nonce||,
    msg2_A : Data<adv> ||nonce||,
    msg2_B : Data<adv> ||nonce||,
    // msg2_x1 : encd_kA_message// |cipherlen(plus(|nonce|, plus(|nonce|, zero())))|, // missing two username lengths here
    msg2_x1 : encd_kA_message // |cipherlen(plus(|nonce|, plus(|nonce|, zero())))|, // missing two username lengths here
    // msg2_x2 : encd_kB_messag  // |cipherlen(plus(|nonce|, plus(|nonce|, zero())))|  // missing two username lengths here
}

struct msg3_StoB {
    msg3_M  : Data<adv> ||nonce||,
    msg3_x1 : Data<adv> |cipherlen(|nonce| + |enckey|)|, // {NA, KAB}KAS
    msg3_x2 : Data<adv> |cipherlen(|nonce| + |enckey|)|  // {NB, KAB}KBS
}

struct msg4_BtoA {
    msg4_M  : Data<adv> ||nonce||,
    msg4_x1 : Data<adv> |cipherlen(|nonce| + |enckey|)|
}
// ************************************************************************


// ************************************************************************
// Alice's result and operation *******************************************
enum alice_result<i, j> {
    | alice_Some Name(KAB<j>)
    | alice_None
}

name A_username : nonce @ Alice
name B_username : nonce @ Alice, Bob

def Alice_main<i> (
    // A : Data<adv> ||nonce||,
    // B : Data<adv> ||nonce||,
    // M  : Name(m<i>)
) @ Alice 
    requires ([m<i>] /\ [A_username] /\ [B_username] <= adv)
: if sec(KA) then (exists j. alice_result<idx i, idx j>) else Data<adv> =
    let A = get(A_username) in
    let B = get(B_username) in
    let M = get(m<i>) in
    let nA = get(NA<i>) in
    let kA = get(KA) in
    corr_case KA in

    unpack j, _ = () in
    let encm:Data<adv> | cipherlen((4 * |nonce|) + |tag|) | = aenc(kA, pack<i>(pack<j>(mA1<idx i, idx j>(kA_message_1<idx i>(nA, M, A, B))))) in

    let _ = output msg1_AtoB(M, A, B, mA1_enc(encm)) to endpoint(Bob) in

    input inp in // inp:msg4_BtoA
    parse inp as msg4_BtoA(M', x1') in
        // let _ = check_session_identifier(M') in

        case adec(kA, x1') {
            | None => pack<j>(alice_None<idx i, idx j>())
            | Some res =>
                unpack i', res' = res in
                unpack j', res'' = res' in

                let o : if sec(KA) then alice_result<idx i, idx j'> else Data<adv> =
                case res'' as kA_messages<idx i', idx j'> {
                    | mA1 _ => alice_None<idx i, idx j'>()
                    | mA2 msg2 =>
                        parse msg2 as kA_message_2<idx i', idx j'>(nA', kAB') in
                        if checknonce(nA', nA) then
                            alice_Some<idx i, idx j'>(kAB')
                        else alice_None<idx i, idx j'>()
                        otherwise alice_None<idx i, idx j'>() 
                    otherwise => alice_None<idx i, idx j'>()
                } 
                in pack<j'>(o)
        }
    otherwise pack<j>(alice_None<idx i, idx j>())
// ************************************************************************

// ************************************************************************
// Bob's result and operation *********************************************
enum bob_result<i, j> {
    | bob_Some Name(KAB<j>)
    | bob_None
}

def Bob_main<i> (
    // B : Data<adv> ||nonce||
) @ Bob
    requires ([B_username] <= adv)
: if sec(KB) then (exists j. bob_result<idx i, idx j>) else Data<adv> =
    let B = get(B_username) in
    let nB = get(NB<i>) in
    let kB = get(KB) in
    corr_case KB in

    input inp in // inp:msg1_AtoB
    parse inp as msg1_AtoB(M', A', B', encm') in 
    // let _ = check_session_identifier(M') in
    // let _ = check_valid_username(A') in
    // let _ = check_valid_username(B') in

    unpack j, _ = () in

    case encm' as encd_kA_message {
        | mA2_enc _ =>
            let _ = output 0x to endpoint(AS) in
            input _ in
            let _ = output 0x to endpoint(Alice) in
            pack<j>(bob_None<idx i, idx j>())
        | mA1_enc v =>
            // if eq(length(M'), |nonce|) && eq(length(A'), |nonce|) && eq(length(v), cipherlen((4 * |nonce|) + |tag|)) then
            let v' = mA1_enc(v) in
            let v'':encd_kA_message = mA1_enc(v') in

            // let temp:kB_message_1<idx i> = kB_message_1<idx i>(nB, M', A', B) in // adding the annotation gets rid of the length...
            let encm = aenc(kB, pack<i>(pack<j>(mB1<idx i, idx j>(kB_message_1<idx i>(nB, M', A', B))))) in
            
            let _ = output msg2_BToS(M', A', B, v') to endpoint(AS) in
            let _ = output mB1_enc(encm) to endpoint(AS) in

            input inp2 in // inp:msg3_StoB
            parse inp2 as msg3_StoB(M', x1', x2') in
            // let _ = check_session_identifier(M') in

            case adec(kB, x2') {
                | None => let _ = output 0x to endpoint(Alice) in pack<j>(bob_None<idx i, idx j>())
                | Some res =>
                    unpack i', res' = res in
                    unpack j', res'' = res' in

                    let o : if sec(KB) then bob_result<idx i, idx j'> else Data<adv> =
                    case res'' as kB_messages<idx i', idx j'> {
                        | mB1 _ => bob_None<idx i, idx j'>()
                        | mB2 msg2 =>
                            parse msg2 as kB_message_2<idx i', idx j'>(nB', msg2') in
                            if checknonce(nB', nB)
                                then
                                // let _ = assert(sec(KB) ==> (i =idx i')) in
                                let _ = output msg4_BtoA(M', x1') to endpoint(Alice) in
                                bob_Some<idx i, idx j'>(msg2')
                            else
                                bob_None<idx i, idx j'>()
                            otherwise bob_None<idx i, idx j'>()
                        otherwise => bob_None<idx i, idx j'>()
                    } 
                    in pack<j'>(o)
            }
            otherwise pack<j>(bob_None<idx i, idx j>())
        otherwise => pack<j>(bob_None<idx i, idx j>())
    }
otherwise {
    unpack j, _ = () in
    pack<j>(bob_None<idx i, idx j>())
}
    
// ************************************************************************


// ************************************************************************
// Server's operation *****************************************************
def AS_main<i> () @ AS
: Unit =
    let kab = get(KAB<i>) in
    let kA:Name(KA) = get(KA) in
    let kB:Name(KB) = get(KB) in

    input inp in // inp:msg2_BtoS
    parse inp as msg2_BToS(M, A, B, x1) in
    input x2 in
    // let _ = check_valid_username(A) in
    // let _ = check_valid_username(B) in

    // if eq(length(M), |nonce|) && eq(length(A), |nonce|) && eq(length(B), |nonce|) then
    case x1 as encd_kA_message {
    | mA2_enc _ => ()
    | mA1_enc x1' => 
        corr_case KA in 
        case adec(kA, x1') {
            | None => ()
            | Some resA =>
                unpack j1, resA' = resA in
                unpack j2, resA'' = resA' in
                case resA'' as kA_messages<idx j1, idx j2> {
                    | mA1 msg1A =>
                        // attempt to decrypt the second message only after the first one decrypts correctly
                        case x2 as encd_kB_message {
                            | mB2_enc _ =>  let _ = output 0x to endpoint(Bob) in ()
                            | mB1_enc c =>
                                    corr_case KB in
                                    case adec(kB, c) {
                                    | None =>  let _ = output 0x to endpoint(Bob) in ()
                                    | Some resB =>
                                        unpack j3, resB' = resB in
                                        unpack j4, resB'' = resB' in
                                        case resB'' as kB_messages<idx j3, idx j4> {
                                            | mB1 msg1B =>
                                                // let _ = check_equal(A, _AA<idx j1>(msg1A), _AB<idx j3>(msg1B)) in
                                                // let _ = check_equal(B, _BA<idx j1>(msg1A), _BB<idx j3>(msg1B)) in
                                                // let _ = check_equal(M, _mA<idx j1>(msg1A), _mB<idx j3>(msg1B)) in

                                                parse msg1A as kA_message_1<idx j1>(nA1', _, _, _) in 
                                                parse msg1B as kB_message_1<idx j3>(nB1', _, _, _) in 
                                                let encmA = aenc(kA,
                                                pack<j1>(pack<i>(mA2<idx j1, idx i>(kA_message_2<idx j1, idx i>(nA1', kab))))) in
                                                let encmB = aenc(kB,
                                                pack<j3>(pack<i>(mB2<idx j3, idx i>(kB_message_2<idx j3, idx i>(nB1', kab))))) in
                                                let _ = output msg3_StoB(M, encmA, encmB) to endpoint(Bob)
                                                in ()
                                                otherwise ()
                                                otherwise ()
                                            | mB2 _ => let _ = output 0x to endpoint(Bob) in ()
                                            otherwise => ()
                                        }
                                }
                            otherwise => ()
                        }
                    | mA2 _ =>  let _ = output 0x to endpoint(Bob) in ()
                    otherwise => ()
                }
        }
        otherwise => ()
    }
    // else let _ = output 0x to endpoint(Bob) in ()
    otherwise ()
// ************************************************************************
