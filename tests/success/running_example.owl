locality alice
locality bob : 1

name msg<@j> : nonce @ bob<j>
name k_data<@j> : enckey (Name(msg<@j>)) @ alice
name psk<@j> : enckey (Name(k_data<@j>)) @ alice, bob<j>

enum Result<j> { 
    | Ok Name(msg<@j>)
    | Err
}  

def alice<@j>() @ alice : if sec(msg<@j>) then Result<idx j> else Data<adv> = 
  let c = aenc(get(psk<@j>), get(k_data<@j>)) in
  output c;
  input i in
  corr_case k_data<@j> in
  corr_case msg<@j> in
  case adec(get(k_data<@j>), i)
  | Some o => Ok<idx j>(o)
  | None => Err<idx j>()

def bob<@j>() @ bob<j> : Unit =
    input i in
    corr_case psk<@j> in
    case adec(get(psk<@j>), i)
    | Some k => 
      let c = aenc(k, get(msg<@j>)) in 
      output c
    | None => ()


