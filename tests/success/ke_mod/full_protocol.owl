include "psk_ke.owl"
include "dh_ke.owl" 
include "transp.owl"

module Full(P : Params, K : functor (Q : Params) => KE(Q)) = { 
    module KE = K(P)
    module T = Transp(P, KE)
    def Server_main () @ P.Server 
        : Option (if sec(P.data) then Name(P.data) else Data<adv>) 
        = corr_case P.data in call T.server()

    def Client_main () @ P.Client
        : Unit
        = call T.client(get(P.data))

}

module tstParams : Params = { 
    locality Client
    locality Server
    name data : nonce @ Client
}

/*
the below type checks but does not extract

module DHFunctor (P : Params) = Full(P, DH_KE)

module PSKFunctor (P : Params) = Full(P, PSK_KE)

module FullDH = DHFunctor(tstParams)
module FullPSK = PSKFunctor(tstParams)
*/


module FullDH = {
    module Inner_KE = DH_KE(tstParams)
    module P = Full(tstParams, Inner_KE)
}

module FullPSK = {
    module Inner_KE = PSK_KE(tstParams)
    module P = Full(tstParams, Inner_KE)
}


